//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatHost.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(ChatHost.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewUserData", ReplyAction="http://tempuri.org/IServiceChat/NewUserDataResponse")]
        string NewUserData(string name, string last_name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewUserData", ReplyAction="http://tempuri.org/IServiceChat/NewUserDataResponse")]
        System.Threading.Tasks.Task<string> NewUserDataAsync(string name, string last_name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserData", ReplyAction="http://tempuri.org/IServiceChat/GetUserDataResponse")]
        System.ValueTuple<string, string, string> GetUserData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserData", ReplyAction="http://tempuri.org/IServiceChat/GetUserDataResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<string, string, string>> GetUserDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewMessChat", ReplyAction="http://tempuri.org/IServiceChat/NewMessChatResponse")]
        string NewMessChat(string log, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewMessChat", ReplyAction="http://tempuri.org/IServiceChat/NewMessChatResponse")]
        System.Threading.Tasks.Task<string> NewMessChatAsync(string log, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetContList", ReplyAction="http://tempuri.org/IServiceChat/GetContListResponse")]
        System.ValueTuple<string[], string[]> GetContList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetContList", ReplyAction="http://tempuri.org/IServiceChat/GetContListResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<string[], string[]>> GetContListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewCont", ReplyAction="http://tempuri.org/IServiceChat/NewContResponse")]
        string NewCont(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewCont", ReplyAction="http://tempuri.org/IServiceChat/NewContResponse")]
        System.Threading.Tasks.Task<string> NewContAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetChatMesList", ReplyAction="http://tempuri.org/IServiceChat/GetChatMesListResponse")]
        string[] GetChatMesList(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetChatMesList", ReplyAction="http://tempuri.org/IServiceChat/GetChatMesListResponse")]
        System.Threading.Tasks.Task<string[]> GetChatMesListAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewBlackCont", ReplyAction="http://tempuri.org/IServiceChat/NewBlackContResponse")]
        string NewBlackCont(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/NewBlackCont", ReplyAction="http://tempuri.org/IServiceChat/NewBlackContResponse")]
        System.Threading.Tasks.Task<string> NewBlackContAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DelBlackCont", ReplyAction="http://tempuri.org/IServiceChat/DelBlackContResponse")]
        string DelBlackCont(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DelBlackCont", ReplyAction="http://tempuri.org/IServiceChat/DelBlackContResponse")]
        System.Threading.Tasks.Task<string> DelBlackContAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DelCont", ReplyAction="http://tempuri.org/IServiceChat/DelContResponse")]
        string DelCont(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DelCont", ReplyAction="http://tempuri.org/IServiceChat/DelContResponse")]
        System.Threading.Tasks.Task<string> DelContAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Login", ReplyAction="http://tempuri.org/IServiceChat/LoginResponse")]
        System.ValueTuple<string, string, string> Login(string log, string pas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Login", ReplyAction="http://tempuri.org/IServiceChat/LoginResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<string, string, string>> LoginAsync(string log, string pas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/TwoFact", ReplyAction="http://tempuri.org/IServiceChat/TwoFactResponse")]
        string TwoFact(string UserCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/TwoFact", ReplyAction="http://tempuri.org/IServiceChat/TwoFactResponse")]
        System.Threading.Tasks.Task<string> TwoFactAsync(string UserCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserNotes", ReplyAction="http://tempuri.org/IServiceChat/GetUserNotesResponse")]
        string[] GetUserNotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserNotes", ReplyAction="http://tempuri.org/IServiceChat/GetUserNotesResponse")]
        System.Threading.Tasks.Task<string[]> GetUserNotesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AddUserNote", ReplyAction="http://tempuri.org/IServiceChat/AddUserNoteResponse")]
        string AddUserNote(string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AddUserNote", ReplyAction="http://tempuri.org/IServiceChat/AddUserNoteResponse")]
        System.Threading.Tasks.Task<string> AddUserNoteAsync(string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DellUserNote", ReplyAction="http://tempuri.org/IServiceChat/DellUserNoteResponse")]
        string DellUserNote();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/DellUserNote", ReplyAction="http://tempuri.org/IServiceChat/DellUserNoteResponse")]
        System.Threading.Tasks.Task<string> DellUserNoteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/two_access", ReplyAction="http://tempuri.org/IServiceChat/two_accessResponse")]
        string two_access();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/two_access", ReplyAction="http://tempuri.org/IServiceChat/two_accessResponse")]
        System.Threading.Tasks.Task<string> two_accessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/two_access_izm", ReplyAction="http://tempuri.org/IServiceChat/two_access_izmResponse")]
        void two_access_izm(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/two_access_izm", ReplyAction="http://tempuri.org/IServiceChat/two_access_izmResponse")]
        System.Threading.Tasks.Task two_access_izmAsync(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/get_active_login", ReplyAction="http://tempuri.org/IServiceChat/get_active_loginResponse")]
        string get_active_login();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/get_active_login", ReplyAction="http://tempuri.org/IServiceChat/get_active_loginResponse")]
        System.Threading.Tasks.Task<string> get_active_loginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Register", ReplyAction="http://tempuri.org/IServiceChat/RegisterResponse")]
        System.ValueTuple<string, string> Register(string log, string pass, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Register", ReplyAction="http://tempuri.org/IServiceChat/RegisterResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<string, string>> RegisterAsync(string log, string pass, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ChatHost.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ChatHost.ServiceChat.IServiceChat>, ChatHost.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string NewUserData(string name, string last_name, string status) {
            return base.Channel.NewUserData(name, last_name, status);
        }
        
        public System.Threading.Tasks.Task<string> NewUserDataAsync(string name, string last_name, string status) {
            return base.Channel.NewUserDataAsync(name, last_name, status);
        }
        
        public System.ValueTuple<string, string, string> GetUserData() {
            return base.Channel.GetUserData();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<string, string, string>> GetUserDataAsync() {
            return base.Channel.GetUserDataAsync();
        }
        
        public string NewMessChat(string log, string message) {
            return base.Channel.NewMessChat(log, message);
        }
        
        public System.Threading.Tasks.Task<string> NewMessChatAsync(string log, string message) {
            return base.Channel.NewMessChatAsync(log, message);
        }
        
        public System.ValueTuple<string[], string[]> GetContList() {
            return base.Channel.GetContList();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<string[], string[]>> GetContListAsync() {
            return base.Channel.GetContListAsync();
        }
        
        public string NewCont(string log) {
            return base.Channel.NewCont(log);
        }
        
        public System.Threading.Tasks.Task<string> NewContAsync(string log) {
            return base.Channel.NewContAsync(log);
        }
        
        public string[] GetChatMesList(string log) {
            return base.Channel.GetChatMesList(log);
        }
        
        public System.Threading.Tasks.Task<string[]> GetChatMesListAsync(string log) {
            return base.Channel.GetChatMesListAsync(log);
        }
        
        public string NewBlackCont(string log) {
            return base.Channel.NewBlackCont(log);
        }
        
        public System.Threading.Tasks.Task<string> NewBlackContAsync(string log) {
            return base.Channel.NewBlackContAsync(log);
        }
        
        public string DelBlackCont(string log) {
            return base.Channel.DelBlackCont(log);
        }
        
        public System.Threading.Tasks.Task<string> DelBlackContAsync(string log) {
            return base.Channel.DelBlackContAsync(log);
        }
        
        public string DelCont(string log) {
            return base.Channel.DelCont(log);
        }
        
        public System.Threading.Tasks.Task<string> DelContAsync(string log) {
            return base.Channel.DelContAsync(log);
        }
        
        public System.ValueTuple<string, string, string> Login(string log, string pas) {
            return base.Channel.Login(log, pas);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<string, string, string>> LoginAsync(string log, string pas) {
            return base.Channel.LoginAsync(log, pas);
        }
        
        public string TwoFact(string UserCode) {
            return base.Channel.TwoFact(UserCode);
        }
        
        public System.Threading.Tasks.Task<string> TwoFactAsync(string UserCode) {
            return base.Channel.TwoFactAsync(UserCode);
        }
        
        public string[] GetUserNotes() {
            return base.Channel.GetUserNotes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserNotesAsync() {
            return base.Channel.GetUserNotesAsync();
        }
        
        public string AddUserNote(string note) {
            return base.Channel.AddUserNote(note);
        }
        
        public System.Threading.Tasks.Task<string> AddUserNoteAsync(string note) {
            return base.Channel.AddUserNoteAsync(note);
        }
        
        public string DellUserNote() {
            return base.Channel.DellUserNote();
        }
        
        public System.Threading.Tasks.Task<string> DellUserNoteAsync() {
            return base.Channel.DellUserNoteAsync();
        }
        
        public string two_access() {
            return base.Channel.two_access();
        }
        
        public System.Threading.Tasks.Task<string> two_accessAsync() {
            return base.Channel.two_accessAsync();
        }
        
        public void two_access_izm(string status) {
            base.Channel.two_access_izm(status);
        }
        
        public System.Threading.Tasks.Task two_access_izmAsync(string status) {
            return base.Channel.two_access_izmAsync(status);
        }
        
        public string get_active_login() {
            return base.Channel.get_active_login();
        }
        
        public System.Threading.Tasks.Task<string> get_active_loginAsync() {
            return base.Channel.get_active_loginAsync();
        }
        
        public System.ValueTuple<string, string> Register(string log, string pass, string email) {
            return base.Channel.Register(log, pass, email);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<string, string>> RegisterAsync(string log, string pass, string email) {
            return base.Channel.RegisterAsync(log, pass, email);
        }
    }
}
